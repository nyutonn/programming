-- テトリス（上下左右は自分で入力）
{-# LANGUAGE NamedFieldPuns, RecordWildCards #-}
{-# LANGUAGE GADTs #-}

import           Data.Char                          (toLower, toUpper)
import           Graphics.Gloss
import           Graphics.Gloss.Interface.Pure.Game
import Data.List (sort)
import Data.Char
import System.IO
import System.Random
import qualified Data.Map as M
import Data.Map ((!))

import Debug.Trace
import Control.Applicative

-- ゲームの状態 (点数、置いたミノ、動かすミノ)
data GameState = GameState { score :: Int, box :: Box  }
--  deriving Show

-- mcolor : ミノの色, mshape : ミノの形
data Mino = Mino { mcolor :: Color, mshape :: [(Int, Int)] }

-- すでに置いたミノの配列
type Box = M.Map (Int,Int) Color
type Time = Float
emptyColor = white

seven_minos :: [Mino]
seven_minos = [
  -- Oミノ
  Mino{ mcolor = red,
        mshape = [(0,0),(0,1),(1,0),(1,1)]},
  -- Lミノ
  Mino{ mcolor = blue,
        mshape = [(0,0),(0,1),(1,0),(0,2)]},
  -- Jミノ
  Mino{ mcolor = green,
        mshape = [(0,0),(0,1),(1,0),(2,0)]},
  -- Sミノ
  Mino{ mcolor = magenta,
        mshape = [(0,0),(1,0),(1,1),(2,1)]},
  -- Zミノ
  Mino{ mcolor = orange,
        mshape = [(0,0),(0,1),(1,1),(1,2)]},
  -- Iミノ
  Mino{ mcolor = cyan,
        mshape = [(0,0),(0,1),(0,2),(0,3)]},
  -- Tミノ
  Mino{ mcolor = yellow,
        mshape = [(0,0),(1,0),(1,1),(2,0)]}
  ]


main :: IO () 
main = do
    play (InWindow "Tetris 1" (600,600) (20,20))
    white 5 (start (mkStdGen 1))
    drawWorld
    eventHandler
    frameHandler

start :: StdGen -> Freer ()
start gen = mainLoop initState

-- ここにメインの挙動を記述する。ここから手をつけていく
mainloop :: GameState -> Freer ()


-- 最初の状態を返す
initState :: IO GameState
initState = do
  return $ GameState { score = 0, box = emptyBox }

-- 初期のミノが何もない状態
emptyBox :: Box
emptyBox = M.fromList [((i,j),emptyColor) | i <- [0..9], j <- [0..19]]


timeout :: Float
timeout = 0.3  --  秒

type World = Freer ()

drawWorld :: World -> Picture
drawWorld (Effect _ p _ _) = translate 10 (-240) . scale 4 4 $ p
drawWorld _                = blank

-- キー入力でテトリミノを動かす

eventHandler :: Event -> World -> World
eventHandler (EventKey (Char c) Up _ _) (Effect _ _ KeyReq k) = k (Just c)
eventHandler _ w = w

-- 時間で操作中のテトリミノを下に落とす
-- 今回は未実装
frameHandler :: Time -> World -> World
frameHandler _ (Effect t p Pause k)  | t > timeout = k ()
frameHandler _ (Effect t p KeyReq k) | t > timeout = k Nothing
frameHandler t (Effect t'  p r k) = Effect (t+t') p r k
frameHandler _ w = w

---------------------------------------------------------------------------
-- Hangmanで使ったIOモナドのようなもの
data Freer a where
  Pure  :: a -> Freer a
  Effect :: Time -> Picture -> Req x -> (x -> Freer a) -> Freer a

instance Functor Freer where
  fmap f (Pure x) = Pure $ f x
  fmap f (Effect t p r k) = Effect t p r (fmap f . k)

instance Applicative Freer where
  pure = Pure
  Pure f <*> m = fmap f m
  Effect t p r k <*> m = Effect t p r (\x -> k x <*> m)

instance Monad Freer where
  return = Pure
  Pure x >>= k = k x
  Effect t p r k' >>= k = Effect t p r (k' >>> k)

-- 副作用を持つ関数を合成する (CBV 合成)
(>>>) :: Monad m => (a -> m b) -> (b -> m c) -> (a -> m c)
f >>> g = (>>= g) . f


data Req a where
  Pause  :: Req ()
  KeyReq :: Req (Maybe Char)

-- Key入力を受け取って、出力する。getLineのようなもの
getKey :: GameState -> Picture -> Freer (Maybe Char)
getKey GameState{..} extrap = do
  let pict = pictures [drawBox box, extrap]
  Effect 0 pict KeyReq pure

-- StateとPictureを出力する。PutStrLnのようなもの
pause :: GameState -> Picture -> Freer ()
pause GameState{..} extrap = do
  let pict = pictures [drawBox box, extrap]
  Effect 0 pict Pause pure
  

-- ------------------------------------------------------------------------
